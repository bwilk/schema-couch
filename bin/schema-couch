#!/usr/bin/env node

var path = require('path'),
    url = require('url'),
    http = require('http'),
    fs = require('fs'),
    cpr = require('cpr'),
    rimraf = require('rimraf'),
    mkdirp = require('mkdirp'),
    connect = require('connect'),
    open = require('open'),
    argv = require('optimist').argv,
    args = argv._,
    spawn = require('child_process').spawn,
    portrange = 45032,
    sever;
    schemaCouch = require('..');


function usage() {
    console.log('\nUsage one of:\n');
    console.log('\tschema-couch push [url] [folder]');
    console.log('\tschema-couch init');
    console.log('\tschema-couch dev');
    console.log('\tschema-couch dist');
}

if (!args.length || args.length < 1) {
    return usage();
}

if (args[0] == 'init') init();
if (args[0] == 'push') push(args[1], args[2])
if (args[0] == 'dev')  dev()
if (args[0] == 'dist') dist()


function push(couch_url, schema_folder) {
  if (!couch_url) {
    couch_url = require(path.resolve('.') + '/settings.json').couch

    if (argv.u) {
      couch_url = url.parse(couch_url);
      couch_url.auth = argv.u;
      if (argv.p) couch_url.auth += ':' + argv.p;
      couch_url = url.format(couch_url);
    }
  }
  if (!schema_folder) {
    schema_folder = path.resolve('./schemas');
  }
  schemaCouch(schema_folder, couch_url, function(err, data){
    if (err) console.log(err);
  });
}

function init() {
  var boilerplate_dir = path.resolve(__dirname, '../node_modules/schema-couch-boilerplate'),
      dest_path = path.resolve('.');

  cpr(boilerplate_dir, dest_path, {
      //filter: /.git/,
      deleteFirst: false, //Delete "to" before
      overwrite: false, //If the file exists, overwrite it
      confirm: true //After the copy, stat all the copied files to make sure they are there
  }, function(errs, files) {
      if (errs) {
        console.log(errs);
        console.log('init failed');
        return;
      }
      // rm package.json
      var p = path.resolve(dest_path, 'package.json');
      fs.unlinkSync(p);

      // rm .git
      var g = path.resolve(dest_path, '.git');
      rimraf.sync(g);

      console.log('init complete');
  });
}

function dev() {
  // rm prod jam
  var p = path.resolve('.', 'jam/require.prod.js');
  try { fs.unlinkSync(p); } catch(e){}

  server();
}

function server(){
  // start a local server on a random port
  var middleware = [];
  middleware.push( connect.static(path.resolve('.')  ));
  middleware.push(connect.directory(  path.resolve('.')  ))
  var app = connect.apply(null, middleware);

  getPort(app, function(port){

    server
      .listen(port, null)
      .on('listening', function() {
        console.log('server running on port: ', port);
        open('http://localhost:' + port)
      })

  })
}


function getPort (app, cb) {
  var port = portrange
  portrange += 1

  server = http.createServer(app)
  server.listen(port, function (err) {
    server.once('close', function () {
      cb(port)
    })
    server.close()
  })
  server.on('error', function (err) {
    getPort(cb)
  })
}


function dist() {

  var dir = path.resolve('.'),
      templates_dir = path.resolve(dir, 'templates'),
      schemas_dir = path.resolve(dir, 'schemas'),
      schemas_paths = fs.readdirSync(schemas_dir),
      types = [];
  schemas_paths.forEach(function(schema){
    if ( schema.indexOf('.js', schema.length - '.js'.length) === -1) return;
    var type_name = schema.substring(0, schema.length -3); // take off .js
    types.push(type_name);
  });
  if (types.length == 0) console.log("Warning: no schemas");

  //  -- make blank templates for undefined type templates
  types.forEach(function(type){
    mkdirp.sync( path.resolve(templates_dir, type)  );
    createIfNotExist( path.resolve(templates_dir, type, 'list.html') )
    createIfNotExist( path.resolve(templates_dir, type, 'view.html') )
    createIfNotExist( path.resolve(templates_dir, type, 'edit.html') )
    createIfNotExist( path.resolve(templates_dir, type, 'create.html') )
  })



  //  -- make the templates.js define([text!game])
  var code = 'define([';
  types.forEach(function(type){
    code += "'text!templates/" + type + "/list.html',";
    code += "'text!templates/" + type + "/view.html',";
    code += "'text!templates/" + type + "/edit.html',";
    code += "'text!templates/" + type + "/create.html',";
  });
  code += '], function(){})'
  fs.writeFileSync( path.resolve(templates_dir, 'build.js')  , code);


  //  -- make a production jam
  var jpath = path.resolve(__dirname, '../node_modules/.bin/jam');
  var jam  = spawn(jpath, ['compile', '-i', 'js/app', '-i', 'templates/build',  '-o', 'jam/require.prod.js'])
  jam.stdin.end();
  jam.stdout.on('data', function(data){ console.log(data.toString()) });

}

function createIfNotExist(path) {
  var stat;
  try { stat = fs.statSync(path); } catch(e) {}
  if (!stat || !stat.isFile()) {
    fs.writeFileSync(path, '');
  }
}

// thinig init
//   -- create a new project in the working directory

// thing push url
//   -- push the schemas using schema-couch to the url

// thing dev
//   -- remove production jam
//   -- start a local server on a random port
//   -- open the browser?

// thing dist


//  -- cp to dist folder